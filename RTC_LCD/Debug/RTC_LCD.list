
RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003394  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800351c  0800351c  0000451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800357c  0800357c  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  0800357c  0800357c  0000457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003584  08003584  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00004584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800358c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          0000028c  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c8b  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000184b  00000000  00000000  0000bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0000d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000530  00000000  00000000  0000dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e16  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009163  00000000  00000000  0002efc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c698f  00000000  00000000  00038129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000feab8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000236c  00000000  00000000  000feafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00100e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003504 	.word	0x08003504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003504 	.word	0x08003504

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


	initialise_monitor_handles();
 80004ce:	f002 ffb9 	bl	8003444 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbb7 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f897 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f97f 	bl	80007dc <MX_GPIO_Init>
  MX_RTC_Init();
 80004de:	f000 f8f5 	bl	80006cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t smiley[8] = {
 80004e2:	4a31      	ldr	r2, [pc, #196]	@ (80005a8 <main+0xe0>)
 80004e4:	463b      	mov	r3, r7
 80004e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ea:	e883 0003 	stmia.w	r3, {r0, r1}
    0b01110,
    0b00000
  };
  char *time;
  char *date;
  lcd_init();
 80004ee:	f002 f987 	bl	8002800 <lcd_init>
  lcd_display_clear();
 80004f2:	f002 f9e9 	bl	80028c8 <lcd_display_clear>
  lcd_set_cursor(1,1);
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f002 f959 	bl	80027b0 <lcd_set_cursor>
  lcd_print_string("RTC ....\n");
 80004fe:	482b      	ldr	r0, [pc, #172]	@ (80005ac <main+0xe4>)
 8000500:	f002 f942 	bl	8002788 <lcd_print_string>
  HAL_Delay(2000);
 8000504:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000508:	f000 fc0e 	bl	8000d28 <HAL_Delay>
  lcd_display_clear();
 800050c:	f002 f9dc 	bl	80028c8 <lcd_display_clear>
  lcd_set_cursor(1,7);
 8000510:	2107      	movs	r1, #7
 8000512:	2001      	movs	r0, #1
 8000514:	f002 f94c 	bl	80027b0 <lcd_set_cursor>
  lcd_createChar(1, smiley); HAL_Delay(2000);
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	2001      	movs	r0, #1
 800051e:	f002 fac5 	bl	8002aac <lcd_createChar>
 8000522:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000526:	f000 fbff 	bl	8000d28 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_display_clear();
 800052a:	f002 f9cd 	bl	80028c8 <lcd_display_clear>
	  lcd_set_cursor(1,1);
 800052e:	2101      	movs	r1, #1
 8000530:	2001      	movs	r0, #1
 8000532:	f002 f93d 	bl	80027b0 <lcd_set_cursor>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000536:	2200      	movs	r2, #0
 8000538:	491d      	ldr	r1, [pc, #116]	@ (80005b0 <main+0xe8>)
 800053a:	481e      	ldr	r0, [pc, #120]	@ (80005b4 <main+0xec>)
 800053c:	f001 fd5d 	bl	8001ffa <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000540:	2200      	movs	r2, #0
 8000542:	491d      	ldr	r1, [pc, #116]	@ (80005b8 <main+0xf0>)
 8000544:	481b      	ldr	r0, [pc, #108]	@ (80005b4 <main+0xec>)
 8000546:	f001 fe3a 	bl	80021be <HAL_RTC_GetDate>
	  lcd_print_string("Time");
 800054a:	481c      	ldr	r0, [pc, #112]	@ (80005bc <main+0xf4>)
 800054c:	f002 f91c 	bl	8002788 <lcd_print_string>
	  lcd_set_cursor(1,6);
 8000550:	2106      	movs	r1, #6
 8000552:	2001      	movs	r0, #1
 8000554:	f002 f92c 	bl	80027b0 <lcd_set_cursor>
	  time=time_to_string(&sTime);
 8000558:	4815      	ldr	r0, [pc, #84]	@ (80005b0 <main+0xe8>)
 800055a:	f002 fa41 	bl	80029e0 <time_to_string>
 800055e:	60f8      	str	r0, [r7, #12]
	  lcd_print_string(time);
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f002 f911 	bl	8002788 <lcd_print_string>
	  lcd_set_cursor(2, 1);
 8000566:	2101      	movs	r1, #1
 8000568:	2002      	movs	r0, #2
 800056a:	f002 f921 	bl	80027b0 <lcd_set_cursor>
	  lcd_print_string("Date");
 800056e:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <main+0xf8>)
 8000570:	f002 f90a 	bl	8002788 <lcd_print_string>
	  lcd_set_cursor(2,6);
 8000574:	2106      	movs	r1, #6
 8000576:	2002      	movs	r0, #2
 8000578:	f002 f91a 	bl	80027b0 <lcd_set_cursor>
	  date=date_to_string(&sDate);
 800057c:	480e      	ldr	r0, [pc, #56]	@ (80005b8 <main+0xf0>)
 800057e:	f002 fa05 	bl	800298c <date_to_string>
 8000582:	60b8      	str	r0, [r7, #8]
	  lcd_print_string(date);
 8000584:	68b8      	ldr	r0, [r7, #8]
 8000586:	f002 f8ff 	bl	8002788 <lcd_print_string>

//	  printf("%d : %d: %d \n",sTime.Hours,sTime.Minutes,sTime.Seconds);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800058a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058e:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <main+0xfc>)
 8000590:	f000 feb5 	bl	80012fe <HAL_GPIO_TogglePin>
	  HAL_Delay(999);
 8000594:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8000598:	f000 fbc6 	bl	8000d28 <HAL_Delay>
	  lcd_display_clear();
 800059c:	f002 f994 	bl	80028c8 <lcd_display_clear>
	  lcd_display_return_home();
 80005a0:	f002 f99c 	bl	80028dc <lcd_display_return_home>
	  lcd_display_clear();
 80005a4:	bf00      	nop
 80005a6:	e7c0      	b.n	800052a <main+0x62>
 80005a8:	08003538 	.word	0x08003538
 80005ac:	0800351c 	.word	0x0800351c
 80005b0:	200000ac 	.word	0x200000ac
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	200000c0 	.word	0x200000c0
 80005bc:	08003528 	.word	0x08003528
 80005c0:	08003530 	.word	0x08003530
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <HAL_RTC_AlarmAEventCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  lcd_display_clear();
 80005d0:	f002 f97a 	bl	80028c8 <lcd_display_clear>
  lcd_display_return_home();
 80005d4:	f002 f982 	bl	80028dc <lcd_display_return_home>
  lcd_set_cursor(1,1);
 80005d8:	2101      	movs	r1, #1
 80005da:	2001      	movs	r0, #1
 80005dc:	f002 f8e8 	bl	80027b0 <lcd_set_cursor>
  lcd_print_string("Alarm Called");
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <HAL_RTC_AlarmAEventCallback+0x38>)
 80005e2:	f002 f8d1 	bl	8002788 <lcd_print_string>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80005ec:	f000 fe87 	bl	80012fe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	@ 0x64
 80005f2:	f000 fb99 	bl	8000d28 <HAL_Delay>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	08003540 	.word	0x08003540
 8000604:	40020c00 	.word	0x40020c00

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fb8b 	bl	8002d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <SystemClock_Config+0xbc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <SystemClock_Config+0xbc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <SystemClock_Config+0xbc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <SystemClock_Config+0xc0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <SystemClock_Config+0xc0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <SystemClock_Config+0xc0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000664:	230a      	movs	r3, #10
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fe59 	bl	8001334 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000688:	f000 fa06 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f8ba 	bl	8001824 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006b6:	f000 f9ef 	bl	8000a98 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d0:	4b3d      	ldr	r3, [pc, #244]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006d2:	4a3e      	ldr	r2, [pc, #248]	@ (80007cc <MX_RTC_Init+0x100>)
 80006d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d6:	4b3c      	ldr	r3, [pc, #240]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006dc:	4b3a      	ldr	r3, [pc, #232]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006de:	227f      	movs	r2, #127	@ 0x7f
 80006e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e2:	4b39      	ldr	r3, [pc, #228]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006e4:	22ff      	movs	r2, #255	@ 0xff
 80006e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e8:	4b37      	ldr	r3, [pc, #220]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ee:	4b36      	ldr	r3, [pc, #216]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f4:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006fa:	4833      	ldr	r0, [pc, #204]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80006fc:	f001 fb60 	bl	8001dc0 <HAL_RTC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000706:	f000 f9c7 	bl	8000a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_RTC_Init+0x104>)
 800070c:	220e      	movs	r2, #14
 800070e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 22;
 8000710:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <MX_RTC_Init+0x104>)
 8000712:	2216      	movs	r2, #22
 8000714:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 3;
 8000716:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <MX_RTC_Init+0x104>)
 8000718:	2203      	movs	r2, #3
 800071a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_RTC_Init+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_RTC_Init+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000728:	2200      	movs	r2, #0
 800072a:	4929      	ldr	r1, [pc, #164]	@ (80007d0 <MX_RTC_Init+0x104>)
 800072c:	4826      	ldr	r0, [pc, #152]	@ (80007c8 <MX_RTC_Init+0xfc>)
 800072e:	f001 fbca 	bl	8001ec6 <HAL_RTC_SetTime>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_RTC_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f9ae 	bl	8000a98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_RTC_Init+0x108>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_RTC_Init+0x108>)
 8000744:	2207      	movs	r2, #7
 8000746:	705a      	strb	r2, [r3, #1]
  sDate.Date = 8;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_RTC_Init+0x108>)
 800074a:	2208      	movs	r2, #8
 800074c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_RTC_Init+0x108>)
 8000750:	2218      	movs	r2, #24
 8000752:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000754:	2200      	movs	r2, #0
 8000756:	491f      	ldr	r1, [pc, #124]	@ (80007d4 <MX_RTC_Init+0x108>)
 8000758:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <MX_RTC_Init+0xfc>)
 800075a:	f001 fcac 	bl	80020b6 <HAL_RTC_SetDate>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000764:	f000 f998 	bl	8000a98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 14;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_RTC_Init+0x10c>)
 800076a:	220e      	movs	r2, #14
 800076c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 22;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_RTC_Init+0x10c>)
 8000770:	2216      	movs	r2, #22
 8000772:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 30;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_RTC_Init+0x10c>)
 8000776:	221e      	movs	r2, #30
 8000778:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_RTC_Init+0x10c>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_RTC_Init+0x10c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_RTC_Init+0x10c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_RTC_Init+0x10c>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_RTC_Init+0x10c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_RTC_Init+0x10c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 8;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_RTC_Init+0x10c>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_RTC_Init+0x10c>)
 80007a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80007ae:	2200      	movs	r2, #0
 80007b0:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <MX_RTC_Init+0x10c>)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_RTC_Init+0xfc>)
 80007b4:	f001 fd52 	bl	800225c <HAL_RTC_SetAlarm_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 80007be:	f000 f96b 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	40002800 	.word	0x40002800
 80007d0:	200000ac 	.word	0x200000ac
 80007d4:	200000c0 	.word	0x200000c0
 80007d8:	200000c4 	.word	0x200000c4

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4ba2      	ldr	r3, [pc, #648]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4aa1      	ldr	r2, [pc, #644]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b9f      	ldr	r3, [pc, #636]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b9b      	ldr	r3, [pc, #620]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a9a      	ldr	r2, [pc, #616]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b98      	ldr	r3, [pc, #608]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b94      	ldr	r3, [pc, #592]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a93      	ldr	r2, [pc, #588]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b91      	ldr	r3, [pc, #580]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a8c      	ldr	r2, [pc, #560]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b8a      	ldr	r3, [pc, #552]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b86      	ldr	r3, [pc, #536]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a85      	ldr	r2, [pc, #532]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b83      	ldr	r3, [pc, #524]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b7f      	ldr	r3, [pc, #508]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a7e      	ldr	r2, [pc, #504]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a80 <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	4879      	ldr	r0, [pc, #484]	@ (8000a84 <MX_GPIO_Init+0x2a8>)
 80008a0:	f000 fd14 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4877      	ldr	r0, [pc, #476]	@ (8000a88 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fd0f 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008b4:	4875      	ldr	r0, [pc, #468]	@ (8000a8c <MX_GPIO_Init+0x2b0>)
 80008b6:	f000 fd09 	bl	80012cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	486c      	ldr	r0, [pc, #432]	@ (8000a84 <MX_GPIO_Init+0x2a8>)
 80008d2:	f000 fb5f 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4866      	ldr	r0, [pc, #408]	@ (8000a88 <MX_GPIO_Init+0x2ac>)
 80008ee:	f000 fb51 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	485e      	ldr	r0, [pc, #376]	@ (8000a88 <MX_GPIO_Init+0x2ac>)
 800090e:	f000 fb41 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	485a      	ldr	r0, [pc, #360]	@ (8000a90 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 fb34 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800092c:	2310      	movs	r3, #16
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093c:	2306      	movs	r3, #6
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4852      	ldr	r0, [pc, #328]	@ (8000a90 <MX_GPIO_Init+0x2b4>)
 8000948:	f000 fb24 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800094c:	23e0      	movs	r3, #224	@ 0xe0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095c:	2305      	movs	r3, #5
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	484a      	ldr	r0, [pc, #296]	@ (8000a90 <MX_GPIO_Init+0x2b4>)
 8000968:	f000 fb14 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096c:	2304      	movs	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4845      	ldr	r0, [pc, #276]	@ (8000a94 <MX_GPIO_Init+0x2b8>)
 8000980:	f000 fb08 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	483c      	ldr	r0, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x2b8>)
 80009a2:	f000 faf7 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4833      	ldr	r0, [pc, #204]	@ (8000a8c <MX_GPIO_Init+0x2b0>)
 80009c0:	f000 fae8 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d6:	2306      	movs	r3, #6
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <MX_GPIO_Init+0x2ac>)
 80009e2:	f000 fad7 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4825      	ldr	r0, [pc, #148]	@ (8000a90 <MX_GPIO_Init+0x2b4>)
 80009fc:	f000 faca 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a12:	230a      	movs	r3, #10
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_GPIO_Init+0x2b4>)
 8000a1e:	f000 fab9 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a22:	2320      	movs	r3, #32
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4815      	ldr	r0, [pc, #84]	@ (8000a8c <MX_GPIO_Init+0x2b0>)
 8000a36:	f000 faad 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	2312      	movs	r3, #18
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	@ (8000a94 <MX_GPIO_Init+0x2b8>)
 8000a58:	f000 fa9c 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_GPIO_Init+0x2a8>)
 8000a72:	f000 fa8f 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	@ 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fa14 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <HAL_RTC_MspInit+0x5c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d119      	bne.n	8000b48 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f86a 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b2e:	f7ff ffb3 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_RTC_MspInit+0x60>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2029      	movs	r0, #41	@ 0x29
 8000b3e:	f000 f9f2 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b42:	2029      	movs	r0, #41	@ 0x29
 8000b44:	f000 fa0b 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40002800 	.word	0x40002800
 8000b54:	42470e3c 	.word	0x42470e3c

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f89b 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <RTC_Alarm_IRQHandler+0x10>)
 8000bbe:	f001 fc91 	bl	80024e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000008c 	.word	0x2000008c

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bf4:	f7ff ffea 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 f8dd 	bl	8002ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fc51 	bl	80004c8 <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c34:	0800358c 	.word	0x0800358c
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c3c:	200002fc 	.word	0x200002fc

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff ff14 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000ec 	.word	0x200000ec

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000ec 	.word	0x200000ec

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e16b      	b.n	8001288 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 815a 	bne.w	8001282 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80b4 	beq.w	8001282 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b60      	ldr	r3, [pc, #384]	@ (80012a0 <HAL_GPIO_Init+0x30c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a5f      	ldr	r2, [pc, #380]	@ (80012a0 <HAL_GPIO_Init+0x30c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b5d      	ldr	r3, [pc, #372]	@ (80012a0 <HAL_GPIO_Init+0x30c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a5b      	ldr	r2, [pc, #364]	@ (80012a4 <HAL_GPIO_Init+0x310>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a52      	ldr	r2, [pc, #328]	@ (80012a8 <HAL_GPIO_Init+0x314>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d02b      	beq.n	80011ba <HAL_GPIO_Init+0x226>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a51      	ldr	r2, [pc, #324]	@ (80012ac <HAL_GPIO_Init+0x318>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a50      	ldr	r2, [pc, #320]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x21e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	@ (80012b4 <HAL_GPIO_Init+0x320>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	@ (80012b8 <HAL_GPIO_Init+0x324>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x216>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	@ (80012bc <HAL_GPIO_Init+0x328>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x212>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	@ (80012c0 <HAL_GPIO_Init+0x32c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	@ (80012c4 <HAL_GPIO_Init+0x330>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x20a>
 800119a:	2307      	movs	r3, #7
 800119c:	e00e      	b.n	80011bc <HAL_GPIO_Init+0x228>
 800119e:	2308      	movs	r3, #8
 80011a0:	e00c      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00a      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011a6:	2305      	movs	r3, #5
 80011a8:	e008      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011ae:	2303      	movs	r3, #3
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011ba:	2300      	movs	r3, #0
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011cc:	4935      	ldr	r1, [pc, #212]	@ (80012a4 <HAL_GPIO_Init+0x310>)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a32      	ldr	r2, [pc, #200]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a27      	ldr	r2, [pc, #156]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001252:	4a1d      	ldr	r2, [pc, #116]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	f67f ae90 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43d9      	mvns	r1, r3
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	400b      	ands	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e267      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d075      	beq.n	800143e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b04      	cmp	r3, #4
 800135c:	d00c      	beq.n	8001378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b85      	ldr	r3, [pc, #532]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d112      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b82      	ldr	r3, [pc, #520]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001376:	d10b      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b7e      	ldr	r3, [pc, #504]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d05b      	beq.n	800143c <HAL_RCC_OscConfig+0x108>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d157      	bne.n	800143c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e242      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x74>
 800139a:	4b76      	ldr	r3, [pc, #472]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b70      	ldr	r3, [pc, #448]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6d      	ldr	r3, [pc, #436]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013cc:	4b69      	ldr	r3, [pc, #420]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a68      	ldr	r2, [pc, #416]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b66      	ldr	r3, [pc, #408]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a65      	ldr	r2, [pc, #404]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc90 	bl	8000d10 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc8c 	bl	8000d10 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e207      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xc0>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fc7c 	bl	8000d10 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fc78 	bl	8000d10 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1f3      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0xe8>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b47      	ldr	r3, [pc, #284]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b44      	ldr	r3, [pc, #272]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c7      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4937      	ldr	r1, [pc, #220]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <HAL_RCC_OscConfig+0x244>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc31 	bl	8000d10 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc2d 	bl	8000d10 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a8      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4925      	ldr	r1, [pc, #148]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_RCC_OscConfig+0x244>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc10 	bl	8000d10 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc0c 	bl	8000d10 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e187      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d036      	beq.n	800158c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d016      	beq.n	8001554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_RCC_OscConfig+0x248>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fbf0 	bl	8000d10 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fbec 	bl	8000d10 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e167      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_RCC_OscConfig+0x240>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x200>
 8001552:	e01b      	b.n	800158c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_RCC_OscConfig+0x248>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbd9 	bl	8000d10 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e00e      	b.n	8001580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fbd5 	bl	8000d10 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d907      	bls.n	8001580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e150      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	42470000 	.word	0x42470000
 800157c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b88      	ldr	r3, [pc, #544]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ea      	bne.n	8001562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8097 	beq.w	80016c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b81      	ldr	r3, [pc, #516]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b7d      	ldr	r3, [pc, #500]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a7c      	ldr	r2, [pc, #496]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b7a      	ldr	r3, [pc, #488]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b77      	ldr	r3, [pc, #476]	@ (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b74      	ldr	r3, [pc, #464]	@ (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a73      	ldr	r2, [pc, #460]	@ (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb95 	bl	8000d10 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fb91 	bl	8000d10 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e10c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b6a      	ldr	r3, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x2ea>
 8001610:	4b64      	ldr	r3, [pc, #400]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001614:	4a63      	ldr	r2, [pc, #396]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	@ 0x70
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x30c>
 8001626:	4b5f      	ldr	r3, [pc, #380]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162a:	4a5e      	ldr	r2, [pc, #376]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	@ 0x70
 8001632:	4b5c      	ldr	r3, [pc, #368]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	4a5b      	ldr	r2, [pc, #364]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	@ 0x70
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 8001640:	4b58      	ldr	r3, [pc, #352]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001644:	4a57      	ldr	r2, [pc, #348]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	@ 0x70
 800164c:	4b55      	ldr	r3, [pc, #340]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d015      	beq.n	800168c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fb56 	bl	8000d10 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fb52 	bl	8000d10 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0cb      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4b49      	ldr	r3, [pc, #292]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ee      	beq.n	8001668 <HAL_RCC_OscConfig+0x334>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fb40 	bl	8000d10 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fb3c 	bl	8000d10 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0b5      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ee      	bne.n	8001694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	4a38      	ldr	r2, [pc, #224]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a1 	beq.w	8001814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d2:	4b34      	ldr	r3, [pc, #208]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d05c      	beq.n	8001798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d141      	bne.n	800176a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <HAL_RCC_OscConfig+0x478>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb10 	bl	8000d10 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fb0c 	bl	8000d10 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e087      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	491b      	ldr	r1, [pc, #108]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x478>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fae5 	bl	8000d10 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fae1 	bl	8000d10 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e05c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x416>
 8001768:	e054      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff face 	bl	8000d10 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff faca 	bl	8000d10 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e045      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
 8001796:	e03d      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e038      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d028      	beq.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d121      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d11a      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d111      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0cc      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b68      	ldr	r3, [pc, #416]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d90c      	bls.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b65      	ldr	r3, [pc, #404]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a58      	ldr	r2, [pc, #352]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e067      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4934      	ldr	r1, [pc, #208]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f9fc 	bl	8000d10 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f9f8 	bl	8000d10 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d20c      	bcs.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f95c 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08003550 	.word	0x08003550
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f4:	b094      	sub	sp, #80	@ 0x50
 80019f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a00:	2300      	movs	r3, #0
 8001a02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a08:	4b79      	ldr	r3, [pc, #484]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d00d      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x40>
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	f200 80e1 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a22:	e0db      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b73      	ldr	r3, [pc, #460]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a28:	e0db      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a2e:	e0d8      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a30:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a38:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	6139      	str	r1, [r7, #16]
 8001a80:	4629      	mov	r1, r5
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a94:	4659      	mov	r1, fp
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4651      	mov	r1, sl
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	eb18 0303 	adds.w	r3, r8, r3
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	eb49 0303 	adc.w	r3, r9, r3
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	024b      	lsls	r3, r1, #9
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aec:	4621      	mov	r1, r4
 8001aee:	024a      	lsls	r2, r1, #9
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af6:	2200      	movs	r2, #0
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b00:	f7fe fb6a 	bl	80001d8 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b0c:	e058      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	4611      	mov	r1, r2
 8001b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b28:	4642      	mov	r2, r8
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0159      	lsls	r1, r3, #5
 8001b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3a:	0150      	lsls	r0, r2, #5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4641      	mov	r1, r8
 8001b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b60:	ebb2 040a 	subs.w	r4, r2, sl
 8001b64:	eb63 050b 	sbc.w	r5, r3, fp
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	00eb      	lsls	r3, r5, #3
 8001b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b76:	00e2      	lsls	r2, r4, #3
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	18e3      	adds	r3, r4, r3
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	464b      	mov	r3, r9
 8001b84:	eb45 0303 	adc.w	r3, r5, r3
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001baa:	2200      	movs	r2, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	61fa      	str	r2, [r7, #28]
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	f7fe fb10 	bl	80001d8 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001bd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3750      	adds	r7, #80	@ 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d035      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c24:	4b62      	ldr	r3, [pc, #392]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2a:	f7ff f871 	bl	8000d10 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c32:	f7ff f86d 	bl	8000d10 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0b0      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c44:	4b5b      	ldr	r3, [pc, #364]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	019a      	lsls	r2, r3, #6
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	071b      	lsls	r3, r3, #28
 8001c5c:	4955      	ldr	r1, [pc, #340]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c64:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f851 	bl	8000d10 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c72:	f7ff f84d 	bl	8000d10 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e090      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c84:	4b4b      	ldr	r3, [pc, #300]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8083 	beq.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b44      	ldr	r3, [pc, #272]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a43      	ldr	r2, [pc, #268]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc6:	f7ff f823 	bl	8000d10 <HAL_GetTick>
 8001cca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cce:	f7ff f81f 	bl	8000d10 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e062      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ce0:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02f      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d028      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d1a:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d20:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d26:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d114      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffed 	bl	8000d10 <HAL_GetTick>
 8001d36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ffe9 	bl	8000d10 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e02a      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ee      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e005      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d90:	6093      	str	r3, [r2, #8]
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	4905      	ldr	r1, [pc, #20]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	42470068 	.word	0x42470068
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	42470e40 	.word	0x42470e40

08001dc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7f5b      	ldrb	r3, [r3, #29]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fe84 	bl	8000af4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d055      	beq.n	8001eac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	22ca      	movs	r2, #202	@ 0xca
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2253      	movs	r2, #83	@ 0x53
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fbd3 	bl	80025bc <RTC_EnterInitMode>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d12c      	bne.n	8001e7a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e32:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fbda 	bl	800262a <RTC_ExitInitMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d110      	bne.n	8001ea2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	22ff      	movs	r2, #255	@ 0xff
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eaa:	e001      	b.n	8001eb0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b087      	sub	sp, #28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	7f1b      	ldrb	r3, [r3, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_RTC_SetTime+0x1c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e087      	b.n	8001ff2 <HAL_RTC_SetTime+0x12c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2202      	movs	r2, #2
 8001eec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d126      	bne.n	8001f42 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fbb1 	bl	8002674 <RTC_ByteToBcd2>
 8001f12:	4603      	mov	r3, r0
 8001f14:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fbaa 	bl	8002674 <RTC_ByteToBcd2>
 8001f20:	4603      	mov	r3, r0
 8001f22:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f24:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fba2 	bl	8002674 <RTC_ByteToBcd2>
 8001f30:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f32:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	78db      	ldrb	r3, [r3, #3]
 8001f3a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e018      	b.n	8001f74 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f62:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	22ca      	movs	r2, #202	@ 0xca
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2253      	movs	r2, #83	@ 0x53
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fb19 	bl	80025bc <RTC_EnterInitMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d120      	bne.n	8001fd6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001f9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001fa2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fb2c 	bl	800262a <RTC_ExitInitMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	22ff      	movs	r2, #255	@ 0xff
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]

  return status;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}

08001ffa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800202c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002030:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0d9b      	lsrs	r3, r3, #22
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11a      	bne.n	80020ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fb18 	bl	80026b0 <RTC_Bcd2ToByte>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fb0f 	bl	80026b0 <RTC_Bcd2ToByte>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	789b      	ldrb	r3, [r3, #2]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fb06 	bl	80026b0 <RTC_Bcd2ToByte>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	7f1b      	ldrb	r3, [r3, #28]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_RTC_SetDate+0x1c>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e071      	b.n	80021b6 <HAL_RTC_SetDate+0x100>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2202      	movs	r2, #2
 80020dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10e      	bne.n	8002102 <HAL_RTC_SetDate+0x4c>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	785b      	ldrb	r3, [r3, #1]
 80020f4:	f023 0310 	bic.w	r3, r3, #16
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	330a      	adds	r3, #10
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11c      	bne.n	8002142 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	78db      	ldrb	r3, [r3, #3]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fab1 	bl	8002674 <RTC_ByteToBcd2>
 8002112:	4603      	mov	r3, r0
 8002114:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 faaa 	bl	8002674 <RTC_ByteToBcd2>
 8002120:	4603      	mov	r3, r0
 8002122:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002124:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	789b      	ldrb	r3, [r3, #2]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 faa2 	bl	8002674 <RTC_ByteToBcd2>
 8002130:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002132:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00e      	b.n	8002160 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	78db      	ldrb	r3, [r3, #3]
 8002146:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800214e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002154:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	22ca      	movs	r2, #202	@ 0xca
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2253      	movs	r2, #83	@ 0x53
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fa23 	bl	80025bc <RTC_EnterInitMode>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10c      	bne.n	800219a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800218a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800218e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fa4a 	bl	800262a <RTC_ExitInitMode>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	22ff      	movs	r2, #255	@ 0xff
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]

  return status;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}

080021be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80021dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0b5b      	lsrs	r3, r3, #13
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11a      	bne.n	8002252 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fa45 	bl	80026b0 <RTC_Bcd2ToByte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa3c 	bl	80026b0 <RTC_Bcd2ToByte>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	789b      	ldrb	r3, [r3, #2]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fa33 	bl	80026b0 <RTC_Bcd2ToByte>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002268:	4b9b      	ldr	r3, [pc, #620]	@ (80024d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a9b      	ldr	r2, [pc, #620]	@ (80024dc <HAL_RTC_SetAlarm_IT+0x280>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0adb      	lsrs	r3, r3, #11
 8002274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	7f1b      	ldrb	r3, [r3, #28]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_RTC_SetAlarm_IT+0x36>
 800228e:	2302      	movs	r3, #2
 8002290:	e11e      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x274>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d137      	bne.n	8002314 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f9d9 	bl	8002674 <RTC_ByteToBcd2>
 80022c2:	4603      	mov	r3, r0
 80022c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f9d2 	bl	8002674 <RTC_ByteToBcd2>
 80022d0:	4603      	mov	r3, r0
 80022d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f9ca 	bl	8002674 <RTC_ByteToBcd2>
 80022e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	78db      	ldrb	r3, [r3, #3]
 80022ea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f9bc 	bl	8002674 <RTC_ByteToBcd2>
 80022fc:	4603      	mov	r3, r0
 80022fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002300:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002308:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800230e:	4313      	orrs	r3, r2
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e023      	b.n	800235c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002334:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800233a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002342:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800234c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002352:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002358:	4313      	orrs	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22ca      	movs	r2, #202	@ 0xca
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2253      	movs	r2, #83	@ 0x53
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002380:	d142      	bne.n	8002408 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002390:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80023a2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	22ff      	movs	r2, #255	@ 0xff
 80023b6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2203      	movs	r2, #3
 80023bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e083      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0e6      	beq.n	80023a4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	e04c      	b.n	80024a2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002416:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002428:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800242a:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2b      	ldr	r2, [pc, #172]	@ (80024dc <HAL_RTC_SetAlarm_IT+0x280>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	0adb      	lsrs	r3, r3, #11
 8002436:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3b01      	subs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ff      	movs	r2, #255	@ 0xff
 8002452:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2203      	movs	r2, #3
 8002458:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0e6      	beq.n	8002440 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002490:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_RTC_SetAlarm_IT+0x284>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <HAL_RTC_SetAlarm_IT+0x284>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_RTC_SetAlarm_IT+0x284>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_RTC_SetAlarm_IT+0x284>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	@ 0xff
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	@ 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RTC_AlarmIRQHandler+0x88>)
 80024ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024f2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002520:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f850 	bl	80005c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002554:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8c8 	bl	80026ec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	775a      	strb	r2, [r3, #29]
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <HAL_RTC_WaitForSynchro+0x48>)
 8002582:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002584:	f7fe fbc4 	bl	8000d10 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800258a:	e009      	b.n	80025a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800258c:	f7fe fbc0 	bl	8000d10 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800259a:	d901      	bls.n	80025a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e007      	b.n	80025b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	00017f5f 	.word	0x00017f5f

080025bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d122      	bne.n	8002620 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fb91 	bl	8000d10 <HAL_GetTick>
 80025ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025f0:	e00c      	b.n	800260c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025f2:	f7fe fb8d 	bl	8000d10 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002600:	d904      	bls.n	800260c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <RTC_EnterInitMode+0x64>
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d1e8      	bne.n	80025f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002644:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff8b 	bl	8002570 <HAL_RTC_WaitForSynchro>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002682:	e005      	b.n	8002690 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	3b0a      	subs	r3, #10
 800268e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2b09      	cmp	r3, #9
 8002694:	d8f6      	bhi.n	8002684 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	b2da      	uxtb	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b2db      	uxtb	r3, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	b2db      	uxtb	r3, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <lcd_send_command>:
#include "LCD.h"
static void write_4_bits(uint8_t value);
static void lcd_enable(void);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd){
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	//RS=0 for command
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RS, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	2101      	movs	r1, #1
 800270e:	480c      	ldr	r0, [pc, #48]	@ (8002740 <lcd_send_command+0x40>)
 8002710:	f7fe fddc 	bl	80012cc <HAL_GPIO_WritePin>
	//R/W 0 for command
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RW, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	2102      	movs	r1, #2
 8002718:	4809      	ldr	r0, [pc, #36]	@ (8002740 <lcd_send_command+0x40>)
 800271a:	f7fe fdd7 	bl	80012cc <HAL_GPIO_WritePin>
	//send the higher nibble of the command
	write_4_bits(cmd >> 4);
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f8e3 	bl	80028f0 <write_4_bits>
	//send the lower nibble of the command
	write_4_bits(cmd & 0x0F);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8dc 	bl	80028f0 <write_4_bits>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40020c00 	.word	0x40020c00

08002744 <lcd_send_char>:
void lcd_send_char(uint8_t data){
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	//RS=1 for user data
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RS, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	2101      	movs	r1, #1
 8002752:	480c      	ldr	r0, [pc, #48]	@ (8002784 <lcd_send_char+0x40>)
 8002754:	f7fe fdba 	bl	80012cc <HAL_GPIO_WritePin>
	//R/W 0 for command
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RW, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	2102      	movs	r1, #2
 800275c:	4809      	ldr	r0, [pc, #36]	@ (8002784 <lcd_send_char+0x40>)
 800275e:	f7fe fdb5 	bl	80012cc <HAL_GPIO_WritePin>
	//send the higher nibble of the user data
	write_4_bits(data >> 4);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f8c1 	bl	80028f0 <write_4_bits>
	//send the lower nibble of the user data
	write_4_bits(data & 0x0F);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f8ba 	bl	80028f0 <write_4_bits>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40020c00 	.word	0x40020c00

08002788 <lcd_print_string>:
void lcd_print_string(char* message){
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	do{
		lcd_send_char((uint8_t)*message++);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ffd3 	bl	8002744 <lcd_send_char>
	}while(*message != '\0');
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f4      	bne.n	8002790 <lcd_print_string+0x8>
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row,uint8_t column){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
	column--;
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <lcd_set_cursor+0x22>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d009      	beq.n	80027e4 <lcd_set_cursor+0x34>
		break;
	case 2:
		lcd_send_command((column |= 0xC0));
		break;
	default:
		break;
 80027d0:	e011      	b.n	80027f6 <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0x80));
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff8f 	bl	8002700 <lcd_send_command>
		break;
 80027e2:	e008      	b.n	80027f6 <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xC0));
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80027ea:	71bb      	strb	r3, [r7, #6]
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff86 	bl	8002700 <lcd_send_command>
		break;
 80027f4:	bf00      	nop
	}
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <lcd_init>:
void lcd_init(void){
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCD_signal;

	/*Configure GPIO pins : LCD_GPIO_RS LCD_GPIO_RW LCD_GPIO_EN
	 * 						LCD_GPIO_D4 LCD_GPIO_D5 LCD_GPIO_D6 LCD_GPIO_D7
	 */
	LCD_signal.Pin = LCD_GPIO_RS|LCD_GPIO_RW|LCD_GPIO_EN|LCD_GPIO_D4
 8002806:	23df      	movs	r3, #223	@ 0xdf
 8002808:	607b      	str	r3, [r7, #4]
	                          |LCD_GPIO_D5|LCD_GPIO_D6|LCD_GPIO_D7;
	LCD_signal.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
	LCD_signal.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
	LCD_signal.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &LCD_signal);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	482a      	ldr	r0, [pc, #168]	@ (80028c4 <lcd_init+0xc4>)
 800281c:	f7fe fbba 	bl	8000f94 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RS, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	2101      	movs	r1, #1
 8002824:	4827      	ldr	r0, [pc, #156]	@ (80028c4 <lcd_init+0xc4>)
 8002826:	f7fe fd51 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RW, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2102      	movs	r1, #2
 800282e:	4825      	ldr	r0, [pc, #148]	@ (80028c4 <lcd_init+0xc4>)
 8002830:	f7fe fd4c 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_EN, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	2104      	movs	r1, #4
 8002838:	4822      	ldr	r0, [pc, #136]	@ (80028c4 <lcd_init+0xc4>)
 800283a:	f7fe fd47 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D4, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	2108      	movs	r1, #8
 8002842:	4820      	ldr	r0, [pc, #128]	@ (80028c4 <lcd_init+0xc4>)
 8002844:	f7fe fd42 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D5, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	2110      	movs	r1, #16
 800284c:	481d      	ldr	r0, [pc, #116]	@ (80028c4 <lcd_init+0xc4>)
 800284e:	f7fe fd3d 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D6, GPIO_PIN_RESET);
 8002852:	2200      	movs	r2, #0
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	481b      	ldr	r0, [pc, #108]	@ (80028c4 <lcd_init+0xc4>)
 8002858:	f7fe fd38 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D7, GPIO_PIN_RESET);
 800285c:	2200      	movs	r2, #0
 800285e:	2140      	movs	r1, #64	@ 0x40
 8002860:	4818      	ldr	r0, [pc, #96]	@ (80028c4 <lcd_init+0xc4>)
 8002862:	f7fe fd33 	bl	80012cc <HAL_GPIO_WritePin>

	//initialization sequence
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RS, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	2101      	movs	r1, #1
 800286a:	4816      	ldr	r0, [pc, #88]	@ (80028c4 <lcd_init+0xc4>)
 800286c:	f7fe fd2e 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_RW, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2102      	movs	r1, #2
 8002874:	4813      	ldr	r0, [pc, #76]	@ (80028c4 <lcd_init+0xc4>)
 8002876:	f7fe fd29 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_Delay(40);
 800287a:	2028      	movs	r0, #40	@ 0x28
 800287c:	f7fe fa54 	bl	8000d28 <HAL_Delay>

	write_4_bits(0x03);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f835 	bl	80028f0 <write_4_bits>

	HAL_Delay(5);
 8002886:	2005      	movs	r0, #5
 8002888:	f7fe fa4e 	bl	8000d28 <HAL_Delay>

	write_4_bits(0x03);
 800288c:	2003      	movs	r0, #3
 800288e:	f000 f82f 	bl	80028f0 <write_4_bits>

	udelay(150);
 8002892:	2096      	movs	r0, #150	@ 0x96
 8002894:	f000 f933 	bl	8002afe <udelay>

	write_4_bits(0x03);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f829 	bl	80028f0 <write_4_bits>
	write_4_bits(0x02);
 800289e:	2002      	movs	r0, #2
 80028a0:	f000 f826 	bl	80028f0 <write_4_bits>

	//function set Command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80028a4:	2028      	movs	r0, #40	@ 0x28
 80028a6:	f7ff ff2b 	bl	8002700 <lcd_send_command>

	//Display ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 80028aa:	200e      	movs	r0, #14
 80028ac:	f7ff ff28 	bl	8002700 <lcd_send_command>

	//display clear
	lcd_display_clear();
 80028b0:	f000 f80a 	bl	80028c8 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 80028b4:	2006      	movs	r0, #6
 80028b6:	f7ff ff23 	bl	8002700 <lcd_send_command>


}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40020c00 	.word	0x40020c00

080028c8 <lcd_display_clear>:
void lcd_display_clear(void){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff ff17 	bl	8002700 <lcd_send_command>
	HAL_Delay(2);
 80028d2:	2002      	movs	r0, #2
 80028d4:	f7fe fa28 	bl	8000d28 <HAL_Delay>
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <lcd_display_return_home>:
void lcd_display_return_home(void){
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 80028e0:	2002      	movs	r0, #2
 80028e2:	f7ff ff0d 	bl	8002700 <lcd_send_command>
	HAL_Delay(2);
 80028e6:	2002      	movs	r0, #2
 80028e8:	f7fe fa1e 	bl	8000d28 <HAL_Delay>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <write_4_bits>:
static void write_4_bits(uint8_t value){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D4, ((value >> 0) & 0x01));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	2108      	movs	r1, #8
 8002906:	4815      	ldr	r0, [pc, #84]	@ (800295c <write_4_bits+0x6c>)
 8002908:	f7fe fce0 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D5, ((value >> 1) & 0x01));
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	2110      	movs	r1, #16
 800291c:	480f      	ldr	r0, [pc, #60]	@ (800295c <write_4_bits+0x6c>)
 800291e:	f7fe fcd5 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D6, ((value >> 2) & 0x01));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	480a      	ldr	r0, [pc, #40]	@ (800295c <write_4_bits+0x6c>)
 8002934:	f7fe fcca 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_D7, ((value >> 3) & 0x01));
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	2140      	movs	r1, #64	@ 0x40
 8002948:	4804      	ldr	r0, [pc, #16]	@ (800295c <write_4_bits+0x6c>)
 800294a:	f7fe fcbf 	bl	80012cc <HAL_GPIO_WritePin>

	lcd_enable();
 800294e:	f000 f807 	bl	8002960 <lcd_enable>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40020c00 	.word	0x40020c00

08002960 <lcd_enable>:
static void lcd_enable(void){
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_EN, GPIO_PIN_SET);
 8002964:	2201      	movs	r2, #1
 8002966:	2104      	movs	r1, #4
 8002968:	4807      	ldr	r0, [pc, #28]	@ (8002988 <lcd_enable+0x28>)
 800296a:	f7fe fcaf 	bl	80012cc <HAL_GPIO_WritePin>
	udelay(100);
 800296e:	2064      	movs	r0, #100	@ 0x64
 8002970:	f000 f8c5 	bl	8002afe <udelay>
	HAL_GPIO_WritePin(GPIOD, LCD_GPIO_EN, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2104      	movs	r1, #4
 8002978:	4803      	ldr	r0, [pc, #12]	@ (8002988 <lcd_enable+0x28>)
 800297a:	f7fe fca7 	bl	80012cc <HAL_GPIO_WritePin>
	udelay(100);
 800297e:	2064      	movs	r0, #100	@ 0x64
 8002980:	f000 f8bd 	bl	8002afe <udelay>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40020c00 	.word	0x40020c00

0800298c <date_to_string>:
char* date_to_string(RTC_DateTypeDef *RTC_date){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	static char buf[11];

	buf[2]='/';
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <date_to_string+0x48>)
 8002996:	222f      	movs	r2, #47	@ 0x2f
 8002998:	709a      	strb	r2, [r3, #2]
	buf[5]='/';
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <date_to_string+0x48>)
 800299c:	222f      	movs	r2, #47	@ 0x2f
 800299e:	715a      	strb	r2, [r3, #5]

	number_to_string(RTC_date->Date,&buf[0]);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	789b      	ldrb	r3, [r3, #2]
 80029a4:	490b      	ldr	r1, [pc, #44]	@ (80029d4 <date_to_string+0x48>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f844 	bl	8002a34 <number_to_string>
	number_to_string(RTC_date->Month,&buf[3]);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	4909      	ldr	r1, [pc, #36]	@ (80029d8 <date_to_string+0x4c>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f83e 	bl	8002a34 <number_to_string>
	number_to_string(RTC_date->Year,&buf[6]);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	78db      	ldrb	r3, [r3, #3]
 80029bc:	4907      	ldr	r1, [pc, #28]	@ (80029dc <date_to_string+0x50>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f838 	bl	8002a34 <number_to_string>

	buf[10]='\0';
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <date_to_string+0x48>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	729a      	strb	r2, [r3, #10]
	return buf;
 80029ca:	4b02      	ldr	r3, [pc, #8]	@ (80029d4 <date_to_string+0x48>)
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200000f0 	.word	0x200000f0
 80029d8:	200000f3 	.word	0x200000f3
 80029dc:	200000f6 	.word	0x200000f6

080029e0 <time_to_string>:
char* time_to_string(RTC_TimeTypeDef *RTC_time){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]=':';
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <time_to_string+0x48>)
 80029ea:	223a      	movs	r2, #58	@ 0x3a
 80029ec:	709a      	strb	r2, [r3, #2]
	buf[5]=':';
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <time_to_string+0x48>)
 80029f0:	223a      	movs	r2, #58	@ 0x3a
 80029f2:	715a      	strb	r2, [r3, #5]

	number_to_string(RTC_time->Hours,&buf[0]);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	490b      	ldr	r1, [pc, #44]	@ (8002a28 <time_to_string+0x48>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f81a 	bl	8002a34 <number_to_string>
	number_to_string(RTC_time->Minutes,&buf[3]);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	4909      	ldr	r1, [pc, #36]	@ (8002a2c <time_to_string+0x4c>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f814 	bl	8002a34 <number_to_string>
	number_to_string(RTC_time->Seconds,&buf[6]);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	789b      	ldrb	r3, [r3, #2]
 8002a10:	4907      	ldr	r1, [pc, #28]	@ (8002a30 <time_to_string+0x50>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f80e 	bl	8002a34 <number_to_string>

	buf[8]='\0';
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <time_to_string+0x48>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	721a      	strb	r2, [r3, #8]
	return buf;
 8002a1e:	4b02      	ldr	r3, [pc, #8]	@ (8002a28 <time_to_string+0x48>)
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200000fc 	.word	0x200000fc
 8002a2c:	200000ff 	.word	0x200000ff
 8002a30:	20000102 	.word	0x20000102

08002a34 <number_to_string>:
void number_to_string(uint8_t num,char* buf){
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
	if(num<10){
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b09      	cmp	r3, #9
 8002a44:	d809      	bhi.n	8002a5a <number_to_string+0x26>
		buf[0]='0';
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2230      	movs	r2, #48	@ 0x30
 8002a4a:	701a      	strb	r2, [r3, #0]
		buf[1]=num+48;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	79fa      	ldrb	r2, [r7, #7]
 8002a52:	3230      	adds	r2, #48	@ 0x30
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
	}else if(num >=10 && num <99){
		buf[0]=(num/10)+48;
		buf[1]=(num%10)+48;
	}
}
 8002a58:	e01f      	b.n	8002a9a <number_to_string+0x66>
	}else if(num >=10 && num <99){
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d91c      	bls.n	8002a9a <number_to_string+0x66>
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b62      	cmp	r3, #98	@ 0x62
 8002a64:	d819      	bhi.n	8002a9a <number_to_string+0x66>
		buf[0]=(num/10)+48;
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <number_to_string+0x74>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3330      	adds	r3, #48	@ 0x30
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
		buf[1]=(num%10)+48;
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <number_to_string+0x74>)
 8002a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a82:	08d9      	lsrs	r1, r3, #3
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	3230      	adds	r2, #48	@ 0x30
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	cccccccd 	.word	0xcccccccd

08002aac <lcd_createChar>:
void lcd_createChar(uint8_t location, uint8_t charc[]){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
	location &=0x07;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	71fb      	strb	r3, [r7, #7]
	lcd_send_command(LCD_SETCGRAMADDR | (location << 3));
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe16 	bl	8002700 <lcd_send_command>
	  for (int i=0; i<8; i++) {
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e009      	b.n	8002aee <lcd_createChar+0x42>
		  lcd_send_char(charc[i]);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe2e 	bl	8002744 <lcd_send_char>
	  for (int i=0; i<8; i++) {
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	ddf2      	ble.n	8002ada <lcd_createChar+0x2e>
	  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <udelay>:
static void udelay(uint32_t cnt){
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<cnt;i++);
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e002      	b.n	8002b12 <udelay+0x14>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3f8      	bcc.n	8002b0c <udelay+0xe>
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <std>:
 8002b28:	2300      	movs	r3, #0
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b36:	6083      	str	r3, [r0, #8]
 8002b38:	8181      	strh	r1, [r0, #12]
 8002b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b3c:	81c2      	strh	r2, [r0, #14]
 8002b3e:	6183      	str	r3, [r0, #24]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2208      	movs	r2, #8
 8002b44:	305c      	adds	r0, #92	@ 0x5c
 8002b46:	f000 f8f4 	bl	8002d32 <memset>
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <std+0x58>)
 8002b4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <std+0x5c>)
 8002b50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <std+0x60>)
 8002b54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <std+0x64>)
 8002b58:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <std+0x68>)
 8002b5c:	6224      	str	r4, [r4, #32]
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d006      	beq.n	8002b70 <std+0x48>
 8002b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b66:	4294      	cmp	r4, r2
 8002b68:	d002      	beq.n	8002b70 <std+0x48>
 8002b6a:	33d0      	adds	r3, #208	@ 0xd0
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	d105      	bne.n	8002b7c <std+0x54>
 8002b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b78:	f000 b954 	b.w	8002e24 <__retarget_lock_init_recursive>
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	bf00      	nop
 8002b80:	08002cad 	.word	0x08002cad
 8002b84:	08002ccf 	.word	0x08002ccf
 8002b88:	08002d07 	.word	0x08002d07
 8002b8c:	08002d2b 	.word	0x08002d2b
 8002b90:	20000108 	.word	0x20000108

08002b94 <stdio_exit_handler>:
 8002b94:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <stdio_exit_handler+0xc>)
 8002b96:	4903      	ldr	r1, [pc, #12]	@ (8002ba4 <stdio_exit_handler+0x10>)
 8002b98:	4803      	ldr	r0, [pc, #12]	@ (8002ba8 <stdio_exit_handler+0x14>)
 8002b9a:	f000 b869 	b.w	8002c70 <_fwalk_sglue>
 8002b9e:	bf00      	nop
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	08002fe1 	.word	0x08002fe1
 8002ba8:	2000001c 	.word	0x2000001c

08002bac <cleanup_stdio>:
 8002bac:	6841      	ldr	r1, [r0, #4]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <cleanup_stdio+0x34>)
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	b510      	push	{r4, lr}
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	d001      	beq.n	8002bbc <cleanup_stdio+0x10>
 8002bb8:	f000 fa12 	bl	8002fe0 <_fflush_r>
 8002bbc:	68a1      	ldr	r1, [r4, #8]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <cleanup_stdio+0x38>)
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	d002      	beq.n	8002bca <cleanup_stdio+0x1e>
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 fa0b 	bl	8002fe0 <_fflush_r>
 8002bca:	68e1      	ldr	r1, [r4, #12]
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <cleanup_stdio+0x3c>)
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d004      	beq.n	8002bdc <cleanup_stdio+0x30>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd8:	f000 ba02 	b.w	8002fe0 <_fflush_r>
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	bf00      	nop
 8002be0:	20000108 	.word	0x20000108
 8002be4:	20000170 	.word	0x20000170
 8002be8:	200001d8 	.word	0x200001d8

08002bec <global_stdio_init.part.0>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <global_stdio_init.part.0+0x30>)
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8002c20 <global_stdio_init.part.0+0x34>)
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c24 <global_stdio_init.part.0+0x38>)
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	f7ff ff94 	bl	8002b28 <std>
 8002c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c04:	2201      	movs	r2, #1
 8002c06:	2109      	movs	r1, #9
 8002c08:	f7ff ff8e 	bl	8002b28 <std>
 8002c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c10:	2202      	movs	r2, #2
 8002c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c16:	2112      	movs	r1, #18
 8002c18:	f7ff bf86 	b.w	8002b28 <std>
 8002c1c:	20000240 	.word	0x20000240
 8002c20:	20000108 	.word	0x20000108
 8002c24:	08002b95 	.word	0x08002b95

08002c28 <__sfp_lock_acquire>:
 8002c28:	4801      	ldr	r0, [pc, #4]	@ (8002c30 <__sfp_lock_acquire+0x8>)
 8002c2a:	f000 b8fc 	b.w	8002e26 <__retarget_lock_acquire_recursive>
 8002c2e:	bf00      	nop
 8002c30:	20000249 	.word	0x20000249

08002c34 <__sfp_lock_release>:
 8002c34:	4801      	ldr	r0, [pc, #4]	@ (8002c3c <__sfp_lock_release+0x8>)
 8002c36:	f000 b8f7 	b.w	8002e28 <__retarget_lock_release_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	20000249 	.word	0x20000249

08002c40 <__sinit>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	f7ff fff0 	bl	8002c28 <__sfp_lock_acquire>
 8002c48:	6a23      	ldr	r3, [r4, #32]
 8002c4a:	b11b      	cbz	r3, 8002c54 <__sinit+0x14>
 8002c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c50:	f7ff bff0 	b.w	8002c34 <__sfp_lock_release>
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <__sinit+0x28>)
 8002c56:	6223      	str	r3, [r4, #32]
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <__sinit+0x2c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f5      	bne.n	8002c4c <__sinit+0xc>
 8002c60:	f7ff ffc4 	bl	8002bec <global_stdio_init.part.0>
 8002c64:	e7f2      	b.n	8002c4c <__sinit+0xc>
 8002c66:	bf00      	nop
 8002c68:	08002bad 	.word	0x08002bad
 8002c6c:	20000240 	.word	0x20000240

08002c70 <_fwalk_sglue>:
 8002c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c74:	4607      	mov	r7, r0
 8002c76:	4688      	mov	r8, r1
 8002c78:	4614      	mov	r4, r2
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c80:	f1b9 0901 	subs.w	r9, r9, #1
 8002c84:	d505      	bpl.n	8002c92 <_fwalk_sglue+0x22>
 8002c86:	6824      	ldr	r4, [r4, #0]
 8002c88:	2c00      	cmp	r4, #0
 8002c8a:	d1f7      	bne.n	8002c7c <_fwalk_sglue+0xc>
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c92:	89ab      	ldrh	r3, [r5, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d907      	bls.n	8002ca8 <_fwalk_sglue+0x38>
 8002c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	d003      	beq.n	8002ca8 <_fwalk_sglue+0x38>
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	47c0      	blx	r8
 8002ca6:	4306      	orrs	r6, r0
 8002ca8:	3568      	adds	r5, #104	@ 0x68
 8002caa:	e7e9      	b.n	8002c80 <_fwalk_sglue+0x10>

08002cac <__sread>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	460c      	mov	r4, r1
 8002cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb4:	f000 f868 	bl	8002d88 <_read_r>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	bfab      	itete	ge
 8002cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8002cc0:	181b      	addge	r3, r3, r0
 8002cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002cc6:	bfac      	ite	ge
 8002cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002cca:	81a3      	strhlt	r3, [r4, #12]
 8002ccc:	bd10      	pop	{r4, pc}

08002cce <__swrite>:
 8002cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd2:	461f      	mov	r7, r3
 8002cd4:	898b      	ldrh	r3, [r1, #12]
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	4605      	mov	r5, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4616      	mov	r6, r2
 8002cde:	d505      	bpl.n	8002cec <__swrite+0x1e>
 8002ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f000 f83c 	bl	8002d64 <_lseek_r>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	4632      	mov	r2, r6
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d02:	f000 b853 	b.w	8002dac <_write_r>

08002d06 <__sseek>:
 8002d06:	b510      	push	{r4, lr}
 8002d08:	460c      	mov	r4, r1
 8002d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d0e:	f000 f829 	bl	8002d64 <_lseek_r>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	bf15      	itete	ne
 8002d18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d22:	81a3      	strheq	r3, [r4, #12]
 8002d24:	bf18      	it	ne
 8002d26:	81a3      	strhne	r3, [r4, #12]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <__sclose>:
 8002d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2e:	f000 b809 	b.w	8002d44 <_close_r>

08002d32 <memset>:
 8002d32:	4402      	add	r2, r0
 8002d34:	4603      	mov	r3, r0
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d100      	bne.n	8002d3c <memset+0xa>
 8002d3a:	4770      	bx	lr
 8002d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8002d40:	e7f9      	b.n	8002d36 <memset+0x4>
	...

08002d44 <_close_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d06      	ldr	r5, [pc, #24]	@ (8002d60 <_close_r+0x1c>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f000 fa40 	bl	80031d4 <_close>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_close_r+0x1a>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_close_r+0x1a>
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	20000244 	.word	0x20000244

08002d64 <_lseek_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4d07      	ldr	r5, [pc, #28]	@ (8002d84 <_lseek_r+0x20>)
 8002d68:	4604      	mov	r4, r0
 8002d6a:	4608      	mov	r0, r1
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	2200      	movs	r2, #0
 8002d70:	602a      	str	r2, [r5, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f9ef 	bl	8003156 <_lseek>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d102      	bne.n	8002d82 <_lseek_r+0x1e>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	b103      	cbz	r3, 8002d82 <_lseek_r+0x1e>
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
 8002d84:	20000244 	.word	0x20000244

08002d88 <_read_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4d07      	ldr	r5, [pc, #28]	@ (8002da8 <_read_r+0x20>)
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4608      	mov	r0, r1
 8002d90:	4611      	mov	r1, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	602a      	str	r2, [r5, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 f987 	bl	80030aa <_read>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d102      	bne.n	8002da6 <_read_r+0x1e>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	b103      	cbz	r3, 8002da6 <_read_r+0x1e>
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
 8002da8:	20000244 	.word	0x20000244

08002dac <_write_r>:
 8002dac:	b538      	push	{r3, r4, r5, lr}
 8002dae:	4d07      	ldr	r5, [pc, #28]	@ (8002dcc <_write_r+0x20>)
 8002db0:	4604      	mov	r4, r0
 8002db2:	4608      	mov	r0, r1
 8002db4:	4611      	mov	r1, r2
 8002db6:	2200      	movs	r2, #0
 8002db8:	602a      	str	r2, [r5, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f000 f9dd 	bl	800317a <_write>
 8002dc0:	1c43      	adds	r3, r0, #1
 8002dc2:	d102      	bne.n	8002dca <_write_r+0x1e>
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	b103      	cbz	r3, 8002dca <_write_r+0x1e>
 8002dc8:	6023      	str	r3, [r4, #0]
 8002dca:	bd38      	pop	{r3, r4, r5, pc}
 8002dcc:	20000244 	.word	0x20000244

08002dd0 <__errno>:
 8002dd0:	4b01      	ldr	r3, [pc, #4]	@ (8002dd8 <__errno+0x8>)
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000018 	.word	0x20000018

08002ddc <__libc_init_array>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4d0d      	ldr	r5, [pc, #52]	@ (8002e14 <__libc_init_array+0x38>)
 8002de0:	4c0d      	ldr	r4, [pc, #52]	@ (8002e18 <__libc_init_array+0x3c>)
 8002de2:	1b64      	subs	r4, r4, r5
 8002de4:	10a4      	asrs	r4, r4, #2
 8002de6:	2600      	movs	r6, #0
 8002de8:	42a6      	cmp	r6, r4
 8002dea:	d109      	bne.n	8002e00 <__libc_init_array+0x24>
 8002dec:	4d0b      	ldr	r5, [pc, #44]	@ (8002e1c <__libc_init_array+0x40>)
 8002dee:	4c0c      	ldr	r4, [pc, #48]	@ (8002e20 <__libc_init_array+0x44>)
 8002df0:	f000 fb88 	bl	8003504 <_init>
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	2600      	movs	r6, #0
 8002dfa:	42a6      	cmp	r6, r4
 8002dfc:	d105      	bne.n	8002e0a <__libc_init_array+0x2e>
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e04:	4798      	blx	r3
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7ee      	b.n	8002de8 <__libc_init_array+0xc>
 8002e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0e:	4798      	blx	r3
 8002e10:	3601      	adds	r6, #1
 8002e12:	e7f2      	b.n	8002dfa <__libc_init_array+0x1e>
 8002e14:	08003584 	.word	0x08003584
 8002e18:	08003584 	.word	0x08003584
 8002e1c:	08003584 	.word	0x08003584
 8002e20:	08003588 	.word	0x08003588

08002e24 <__retarget_lock_init_recursive>:
 8002e24:	4770      	bx	lr

08002e26 <__retarget_lock_acquire_recursive>:
 8002e26:	4770      	bx	lr

08002e28 <__retarget_lock_release_recursive>:
 8002e28:	4770      	bx	lr
	...

08002e2c <_free_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4605      	mov	r5, r0
 8002e30:	2900      	cmp	r1, #0
 8002e32:	d041      	beq.n	8002eb8 <_free_r+0x8c>
 8002e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e38:	1f0c      	subs	r4, r1, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bfb8      	it	lt
 8002e3e:	18e4      	addlt	r4, r4, r3
 8002e40:	f000 f83e 	bl	8002ec0 <__malloc_lock>
 8002e44:	4a1d      	ldr	r2, [pc, #116]	@ (8002ebc <_free_r+0x90>)
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	b933      	cbnz	r3, 8002e58 <_free_r+0x2c>
 8002e4a:	6063      	str	r3, [r4, #4]
 8002e4c:	6014      	str	r4, [r2, #0]
 8002e4e:	4628      	mov	r0, r5
 8002e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e54:	f000 b83a 	b.w	8002ecc <__malloc_unlock>
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d908      	bls.n	8002e6e <_free_r+0x42>
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	1821      	adds	r1, r4, r0
 8002e60:	428b      	cmp	r3, r1
 8002e62:	bf01      	itttt	eq
 8002e64:	6819      	ldreq	r1, [r3, #0]
 8002e66:	685b      	ldreq	r3, [r3, #4]
 8002e68:	1809      	addeq	r1, r1, r0
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	e7ed      	b.n	8002e4a <_free_r+0x1e>
 8002e6e:	461a      	mov	r2, r3
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b10b      	cbz	r3, 8002e78 <_free_r+0x4c>
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	d9fa      	bls.n	8002e6e <_free_r+0x42>
 8002e78:	6811      	ldr	r1, [r2, #0]
 8002e7a:	1850      	adds	r0, r2, r1
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d10b      	bne.n	8002e98 <_free_r+0x6c>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	4401      	add	r1, r0
 8002e84:	1850      	adds	r0, r2, r1
 8002e86:	4283      	cmp	r3, r0
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	d1e0      	bne.n	8002e4e <_free_r+0x22>
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	6053      	str	r3, [r2, #4]
 8002e92:	4408      	add	r0, r1
 8002e94:	6010      	str	r0, [r2, #0]
 8002e96:	e7da      	b.n	8002e4e <_free_r+0x22>
 8002e98:	d902      	bls.n	8002ea0 <_free_r+0x74>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	602b      	str	r3, [r5, #0]
 8002e9e:	e7d6      	b.n	8002e4e <_free_r+0x22>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	1821      	adds	r1, r4, r0
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	bf04      	itt	eq
 8002ea8:	6819      	ldreq	r1, [r3, #0]
 8002eaa:	685b      	ldreq	r3, [r3, #4]
 8002eac:	6063      	str	r3, [r4, #4]
 8002eae:	bf04      	itt	eq
 8002eb0:	1809      	addeq	r1, r1, r0
 8002eb2:	6021      	streq	r1, [r4, #0]
 8002eb4:	6054      	str	r4, [r2, #4]
 8002eb6:	e7ca      	b.n	8002e4e <_free_r+0x22>
 8002eb8:	bd38      	pop	{r3, r4, r5, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000024c 	.word	0x2000024c

08002ec0 <__malloc_lock>:
 8002ec0:	4801      	ldr	r0, [pc, #4]	@ (8002ec8 <__malloc_lock+0x8>)
 8002ec2:	f7ff bfb0 	b.w	8002e26 <__retarget_lock_acquire_recursive>
 8002ec6:	bf00      	nop
 8002ec8:	20000248 	.word	0x20000248

08002ecc <__malloc_unlock>:
 8002ecc:	4801      	ldr	r0, [pc, #4]	@ (8002ed4 <__malloc_unlock+0x8>)
 8002ece:	f7ff bfab 	b.w	8002e28 <__retarget_lock_release_recursive>
 8002ed2:	bf00      	nop
 8002ed4:	20000248 	.word	0x20000248

08002ed8 <__sflush_r>:
 8002ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee0:	0716      	lsls	r6, r2, #28
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	d454      	bmi.n	8002f92 <__sflush_r+0xba>
 8002ee8:	684b      	ldr	r3, [r1, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dc02      	bgt.n	8002ef4 <__sflush_r+0x1c>
 8002eee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dd48      	ble.n	8002f86 <__sflush_r+0xae>
 8002ef4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ef6:	2e00      	cmp	r6, #0
 8002ef8:	d045      	beq.n	8002f86 <__sflush_r+0xae>
 8002efa:	2300      	movs	r3, #0
 8002efc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f00:	682f      	ldr	r7, [r5, #0]
 8002f02:	6a21      	ldr	r1, [r4, #32]
 8002f04:	602b      	str	r3, [r5, #0]
 8002f06:	d030      	beq.n	8002f6a <__sflush_r+0x92>
 8002f08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	0759      	lsls	r1, r3, #29
 8002f0e:	d505      	bpl.n	8002f1c <__sflush_r+0x44>
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	1ad2      	subs	r2, r2, r3
 8002f14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f16:	b10b      	cbz	r3, 8002f1c <__sflush_r+0x44>
 8002f18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f20:	6a21      	ldr	r1, [r4, #32]
 8002f22:	4628      	mov	r0, r5
 8002f24:	47b0      	blx	r6
 8002f26:	1c43      	adds	r3, r0, #1
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	d106      	bne.n	8002f3a <__sflush_r+0x62>
 8002f2c:	6829      	ldr	r1, [r5, #0]
 8002f2e:	291d      	cmp	r1, #29
 8002f30:	d82b      	bhi.n	8002f8a <__sflush_r+0xb2>
 8002f32:	4a2a      	ldr	r2, [pc, #168]	@ (8002fdc <__sflush_r+0x104>)
 8002f34:	410a      	asrs	r2, r1
 8002f36:	07d6      	lsls	r6, r2, #31
 8002f38:	d427      	bmi.n	8002f8a <__sflush_r+0xb2>
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	6062      	str	r2, [r4, #4]
 8002f3e:	04d9      	lsls	r1, r3, #19
 8002f40:	6922      	ldr	r2, [r4, #16]
 8002f42:	6022      	str	r2, [r4, #0]
 8002f44:	d504      	bpl.n	8002f50 <__sflush_r+0x78>
 8002f46:	1c42      	adds	r2, r0, #1
 8002f48:	d101      	bne.n	8002f4e <__sflush_r+0x76>
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	b903      	cbnz	r3, 8002f50 <__sflush_r+0x78>
 8002f4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f52:	602f      	str	r7, [r5, #0]
 8002f54:	b1b9      	cbz	r1, 8002f86 <__sflush_r+0xae>
 8002f56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f5a:	4299      	cmp	r1, r3
 8002f5c:	d002      	beq.n	8002f64 <__sflush_r+0x8c>
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f7ff ff64 	bl	8002e2c <_free_r>
 8002f64:	2300      	movs	r3, #0
 8002f66:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f68:	e00d      	b.n	8002f86 <__sflush_r+0xae>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	47b0      	blx	r6
 8002f70:	4602      	mov	r2, r0
 8002f72:	1c50      	adds	r0, r2, #1
 8002f74:	d1c9      	bne.n	8002f0a <__sflush_r+0x32>
 8002f76:	682b      	ldr	r3, [r5, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0c6      	beq.n	8002f0a <__sflush_r+0x32>
 8002f7c:	2b1d      	cmp	r3, #29
 8002f7e:	d001      	beq.n	8002f84 <__sflush_r+0xac>
 8002f80:	2b16      	cmp	r3, #22
 8002f82:	d11e      	bne.n	8002fc2 <__sflush_r+0xea>
 8002f84:	602f      	str	r7, [r5, #0]
 8002f86:	2000      	movs	r0, #0
 8002f88:	e022      	b.n	8002fd0 <__sflush_r+0xf8>
 8002f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	e01b      	b.n	8002fca <__sflush_r+0xf2>
 8002f92:	690f      	ldr	r7, [r1, #16]
 8002f94:	2f00      	cmp	r7, #0
 8002f96:	d0f6      	beq.n	8002f86 <__sflush_r+0xae>
 8002f98:	0793      	lsls	r3, r2, #30
 8002f9a:	680e      	ldr	r6, [r1, #0]
 8002f9c:	bf08      	it	eq
 8002f9e:	694b      	ldreq	r3, [r1, #20]
 8002fa0:	600f      	str	r7, [r1, #0]
 8002fa2:	bf18      	it	ne
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	eba6 0807 	sub.w	r8, r6, r7
 8002faa:	608b      	str	r3, [r1, #8]
 8002fac:	f1b8 0f00 	cmp.w	r8, #0
 8002fb0:	dde9      	ble.n	8002f86 <__sflush_r+0xae>
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002fb6:	4643      	mov	r3, r8
 8002fb8:	463a      	mov	r2, r7
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b0      	blx	r6
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	dc08      	bgt.n	8002fd4 <__sflush_r+0xfc>
 8002fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fca:	81a3      	strh	r3, [r4, #12]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd4:	4407      	add	r7, r0
 8002fd6:	eba8 0800 	sub.w	r8, r8, r0
 8002fda:	e7e7      	b.n	8002fac <__sflush_r+0xd4>
 8002fdc:	dfbffffe 	.word	0xdfbffffe

08002fe0 <_fflush_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	690b      	ldr	r3, [r1, #16]
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	b913      	cbnz	r3, 8002ff0 <_fflush_r+0x10>
 8002fea:	2500      	movs	r5, #0
 8002fec:	4628      	mov	r0, r5
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	b118      	cbz	r0, 8002ffa <_fflush_r+0x1a>
 8002ff2:	6a03      	ldr	r3, [r0, #32]
 8002ff4:	b90b      	cbnz	r3, 8002ffa <_fflush_r+0x1a>
 8002ff6:	f7ff fe23 	bl	8002c40 <__sinit>
 8002ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f3      	beq.n	8002fea <_fflush_r+0xa>
 8003002:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003004:	07d0      	lsls	r0, r2, #31
 8003006:	d404      	bmi.n	8003012 <_fflush_r+0x32>
 8003008:	0599      	lsls	r1, r3, #22
 800300a:	d402      	bmi.n	8003012 <_fflush_r+0x32>
 800300c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800300e:	f7ff ff0a 	bl	8002e26 <__retarget_lock_acquire_recursive>
 8003012:	4628      	mov	r0, r5
 8003014:	4621      	mov	r1, r4
 8003016:	f7ff ff5f 	bl	8002ed8 <__sflush_r>
 800301a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800301c:	07da      	lsls	r2, r3, #31
 800301e:	4605      	mov	r5, r0
 8003020:	d4e4      	bmi.n	8002fec <_fflush_r+0xc>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	059b      	lsls	r3, r3, #22
 8003026:	d4e1      	bmi.n	8002fec <_fflush_r+0xc>
 8003028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800302a:	f7ff fefd 	bl	8002e28 <__retarget_lock_release_recursive>
 800302e:	e7dd      	b.n	8002fec <_fflush_r+0xc>

08003030 <findslot>:
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <findslot+0x2c>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	b118      	cbz	r0, 8003042 <findslot+0x12>
 800303a:	6a03      	ldr	r3, [r0, #32]
 800303c:	b90b      	cbnz	r3, 8003042 <findslot+0x12>
 800303e:	f7ff fdff 	bl	8002c40 <__sinit>
 8003042:	2c13      	cmp	r4, #19
 8003044:	d807      	bhi.n	8003056 <findslot+0x26>
 8003046:	4806      	ldr	r0, [pc, #24]	@ (8003060 <findslot+0x30>)
 8003048:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800304c:	3201      	adds	r2, #1
 800304e:	d002      	beq.n	8003056 <findslot+0x26>
 8003050:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003054:	bd10      	pop	{r4, pc}
 8003056:	2000      	movs	r0, #0
 8003058:	e7fc      	b.n	8003054 <findslot+0x24>
 800305a:	bf00      	nop
 800305c:	20000018 	.word	0x20000018
 8003060:	2000025c 	.word	0x2000025c

08003064 <error>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f7ff feb2 	bl	8002dd0 <__errno>
 800306c:	2613      	movs	r6, #19
 800306e:	4605      	mov	r5, r0
 8003070:	2700      	movs	r7, #0
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	beab      	bkpt	0x00ab
 8003078:	4606      	mov	r6, r0
 800307a:	602e      	str	r6, [r5, #0]
 800307c:	4620      	mov	r0, r4
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003080 <checkerror>:
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d101      	bne.n	8003088 <checkerror+0x8>
 8003084:	f7ff bfee 	b.w	8003064 <error>
 8003088:	4770      	bx	lr

0800308a <_swiread>:
 800308a:	b530      	push	{r4, r5, lr}
 800308c:	b085      	sub	sp, #20
 800308e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003092:	9203      	str	r2, [sp, #12]
 8003094:	2406      	movs	r4, #6
 8003096:	ad01      	add	r5, sp, #4
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	beab      	bkpt	0x00ab
 800309e:	4604      	mov	r4, r0
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ffed 	bl	8003080 <checkerror>
 80030a6:	b005      	add	sp, #20
 80030a8:	bd30      	pop	{r4, r5, pc}

080030aa <_read>:
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	460e      	mov	r6, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	f7ff ffbe 	bl	8003030 <findslot>
 80030b4:	4605      	mov	r5, r0
 80030b6:	b930      	cbnz	r0, 80030c6 <_read+0x1c>
 80030b8:	f7ff fe8a 	bl	8002dd0 <__errno>
 80030bc:	2309      	movs	r3, #9
 80030be:	6003      	str	r3, [r0, #0]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	6800      	ldr	r0, [r0, #0]
 80030c8:	4622      	mov	r2, r4
 80030ca:	4631      	mov	r1, r6
 80030cc:	f7ff ffdd 	bl	800308a <_swiread>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d0f5      	beq.n	80030c0 <_read+0x16>
 80030d4:	686b      	ldr	r3, [r5, #4]
 80030d6:	1a20      	subs	r0, r4, r0
 80030d8:	4403      	add	r3, r0
 80030da:	606b      	str	r3, [r5, #4]
 80030dc:	e7f2      	b.n	80030c4 <_read+0x1a>

080030de <_swilseek>:
 80030de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e0:	460c      	mov	r4, r1
 80030e2:	4616      	mov	r6, r2
 80030e4:	f7ff ffa4 	bl	8003030 <findslot>
 80030e8:	4605      	mov	r5, r0
 80030ea:	b940      	cbnz	r0, 80030fe <_swilseek+0x20>
 80030ec:	f7ff fe70 	bl	8002dd0 <__errno>
 80030f0:	2309      	movs	r3, #9
 80030f2:	6003      	str	r3, [r0, #0]
 80030f4:	f04f 34ff 	mov.w	r4, #4294967295
 80030f8:	4620      	mov	r0, r4
 80030fa:	b003      	add	sp, #12
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	2e02      	cmp	r6, #2
 8003100:	d903      	bls.n	800310a <_swilseek+0x2c>
 8003102:	f7ff fe65 	bl	8002dd0 <__errno>
 8003106:	2316      	movs	r3, #22
 8003108:	e7f3      	b.n	80030f2 <_swilseek+0x14>
 800310a:	2e01      	cmp	r6, #1
 800310c:	d112      	bne.n	8003134 <_swilseek+0x56>
 800310e:	6843      	ldr	r3, [r0, #4]
 8003110:	18e4      	adds	r4, r4, r3
 8003112:	d4f6      	bmi.n	8003102 <_swilseek+0x24>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	260a      	movs	r6, #10
 8003118:	e9cd 3400 	strd	r3, r4, [sp]
 800311c:	466f      	mov	r7, sp
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	beab      	bkpt	0x00ab
 8003124:	4606      	mov	r6, r0
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ffaa 	bl	8003080 <checkerror>
 800312c:	2800      	cmp	r0, #0
 800312e:	dbe1      	blt.n	80030f4 <_swilseek+0x16>
 8003130:	606c      	str	r4, [r5, #4]
 8003132:	e7e1      	b.n	80030f8 <_swilseek+0x1a>
 8003134:	2e02      	cmp	r6, #2
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	d1ec      	bne.n	8003114 <_swilseek+0x36>
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	260c      	movs	r6, #12
 800313e:	466f      	mov	r7, sp
 8003140:	4630      	mov	r0, r6
 8003142:	4639      	mov	r1, r7
 8003144:	beab      	bkpt	0x00ab
 8003146:	4606      	mov	r6, r0
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ff99 	bl	8003080 <checkerror>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d0d0      	beq.n	80030f4 <_swilseek+0x16>
 8003152:	4404      	add	r4, r0
 8003154:	e7de      	b.n	8003114 <_swilseek+0x36>

08003156 <_lseek>:
 8003156:	f7ff bfc2 	b.w	80030de <_swilseek>

0800315a <_swiwrite>:
 800315a:	b530      	push	{r4, r5, lr}
 800315c:	b085      	sub	sp, #20
 800315e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003162:	9203      	str	r2, [sp, #12]
 8003164:	2405      	movs	r4, #5
 8003166:	ad01      	add	r5, sp, #4
 8003168:	4620      	mov	r0, r4
 800316a:	4629      	mov	r1, r5
 800316c:	beab      	bkpt	0x00ab
 800316e:	4604      	mov	r4, r0
 8003170:	4620      	mov	r0, r4
 8003172:	f7ff ff85 	bl	8003080 <checkerror>
 8003176:	b005      	add	sp, #20
 8003178:	bd30      	pop	{r4, r5, pc}

0800317a <_write>:
 800317a:	b570      	push	{r4, r5, r6, lr}
 800317c:	460e      	mov	r6, r1
 800317e:	4615      	mov	r5, r2
 8003180:	f7ff ff56 	bl	8003030 <findslot>
 8003184:	4604      	mov	r4, r0
 8003186:	b930      	cbnz	r0, 8003196 <_write+0x1c>
 8003188:	f7ff fe22 	bl	8002dd0 <__errno>
 800318c:	2309      	movs	r3, #9
 800318e:	6003      	str	r3, [r0, #0]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	bd70      	pop	{r4, r5, r6, pc}
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	462a      	mov	r2, r5
 800319a:	4631      	mov	r1, r6
 800319c:	f7ff ffdd 	bl	800315a <_swiwrite>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	dbf5      	blt.n	8003190 <_write+0x16>
 80031a4:	6862      	ldr	r2, [r4, #4]
 80031a6:	1ae8      	subs	r0, r5, r3
 80031a8:	4402      	add	r2, r0
 80031aa:	42ab      	cmp	r3, r5
 80031ac:	6062      	str	r2, [r4, #4]
 80031ae:	d1f1      	bne.n	8003194 <_write+0x1a>
 80031b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff bf55 	b.w	8003064 <error>

080031ba <_swiclose>:
 80031ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031bc:	2402      	movs	r4, #2
 80031be:	9001      	str	r0, [sp, #4]
 80031c0:	ad01      	add	r5, sp, #4
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	beab      	bkpt	0x00ab
 80031c8:	4604      	mov	r4, r0
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ff58 	bl	8003080 <checkerror>
 80031d0:	b003      	add	sp, #12
 80031d2:	bd30      	pop	{r4, r5, pc}

080031d4 <_close>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	f7ff ff2a 	bl	8003030 <findslot>
 80031dc:	4604      	mov	r4, r0
 80031de:	b930      	cbnz	r0, 80031ee <_close+0x1a>
 80031e0:	f7ff fdf6 	bl	8002dd0 <__errno>
 80031e4:	2309      	movs	r3, #9
 80031e6:	6003      	str	r3, [r0, #0]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
 80031ee:	3d01      	subs	r5, #1
 80031f0:	2d01      	cmp	r5, #1
 80031f2:	d809      	bhi.n	8003208 <_close+0x34>
 80031f4:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <_close+0x40>)
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d104      	bne.n	8003208 <_close+0x34>
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	2000      	movs	r0, #0
 8003206:	e7f1      	b.n	80031ec <_close+0x18>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	f7ff ffd6 	bl	80031ba <_swiclose>
 800320e:	2800      	cmp	r0, #0
 8003210:	d0f5      	beq.n	80031fe <_close+0x2a>
 8003212:	e7eb      	b.n	80031ec <_close+0x18>
 8003214:	2000025c 	.word	0x2000025c

08003218 <_swistat>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	460c      	mov	r4, r1
 800321c:	f7ff ff08 	bl	8003030 <findslot>
 8003220:	4605      	mov	r5, r0
 8003222:	b930      	cbnz	r0, 8003232 <_swistat+0x1a>
 8003224:	f7ff fdd4 	bl	8002dd0 <__errno>
 8003228:	2309      	movs	r3, #9
 800322a:	6003      	str	r3, [r0, #0]
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	bd70      	pop	{r4, r5, r6, pc}
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800323e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003240:	260c      	movs	r6, #12
 8003242:	4630      	mov	r0, r6
 8003244:	4629      	mov	r1, r5
 8003246:	beab      	bkpt	0x00ab
 8003248:	4605      	mov	r5, r0
 800324a:	4628      	mov	r0, r5
 800324c:	f7ff ff18 	bl	8003080 <checkerror>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d0eb      	beq.n	800322c <_swistat+0x14>
 8003254:	6120      	str	r0, [r4, #16]
 8003256:	2000      	movs	r0, #0
 8003258:	e7ea      	b.n	8003230 <_swistat+0x18>

0800325a <_stat>:
 800325a:	b538      	push	{r3, r4, r5, lr}
 800325c:	460d      	mov	r5, r1
 800325e:	4604      	mov	r4, r0
 8003260:	2258      	movs	r2, #88	@ 0x58
 8003262:	2100      	movs	r1, #0
 8003264:	4628      	mov	r0, r5
 8003266:	f7ff fd64 	bl	8002d32 <memset>
 800326a:	4620      	mov	r0, r4
 800326c:	2100      	movs	r1, #0
 800326e:	f000 f811 	bl	8003294 <_swiopen>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	4604      	mov	r4, r0
 8003276:	d00b      	beq.n	8003290 <_stat+0x36>
 8003278:	686b      	ldr	r3, [r5, #4]
 800327a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800327e:	606b      	str	r3, [r5, #4]
 8003280:	4629      	mov	r1, r5
 8003282:	f7ff ffc9 	bl	8003218 <_swistat>
 8003286:	4605      	mov	r5, r0
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff ffa3 	bl	80031d4 <_close>
 800328e:	462c      	mov	r4, r5
 8003290:	4620      	mov	r0, r4
 8003292:	bd38      	pop	{r3, r4, r5, pc}

08003294 <_swiopen>:
 8003294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	4f29      	ldr	r7, [pc, #164]	@ (8003340 <_swiopen+0xac>)
 800329a:	b096      	sub	sp, #88	@ 0x58
 800329c:	4682      	mov	sl, r0
 800329e:	460e      	mov	r6, r1
 80032a0:	2400      	movs	r4, #0
 80032a2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80032a6:	3301      	adds	r3, #1
 80032a8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80032ac:	d00c      	beq.n	80032c8 <_swiopen+0x34>
 80032ae:	3401      	adds	r4, #1
 80032b0:	2c14      	cmp	r4, #20
 80032b2:	d1f6      	bne.n	80032a2 <_swiopen+0xe>
 80032b4:	f7ff fd8c 	bl	8002dd0 <__errno>
 80032b8:	2318      	movs	r3, #24
 80032ba:	6003      	str	r3, [r0, #0]
 80032bc:	f04f 34ff 	mov.w	r4, #4294967295
 80032c0:	4620      	mov	r0, r4
 80032c2:	b016      	add	sp, #88	@ 0x58
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80032cc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80032d0:	46e9      	mov	r9, sp
 80032d2:	d109      	bne.n	80032e8 <_swiopen+0x54>
 80032d4:	4649      	mov	r1, r9
 80032d6:	4650      	mov	r0, sl
 80032d8:	f7ff ffbf 	bl	800325a <_stat>
 80032dc:	3001      	adds	r0, #1
 80032de:	d003      	beq.n	80032e8 <_swiopen+0x54>
 80032e0:	f7ff fd76 	bl	8002dd0 <__errno>
 80032e4:	2311      	movs	r3, #17
 80032e6:	e7e8      	b.n	80032ba <_swiopen+0x26>
 80032e8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80032ec:	f240 6301 	movw	r3, #1537	@ 0x601
 80032f0:	07b2      	lsls	r2, r6, #30
 80032f2:	bf48      	it	mi
 80032f4:	f045 0502 	orrmi.w	r5, r5, #2
 80032f8:	421e      	tst	r6, r3
 80032fa:	bf18      	it	ne
 80032fc:	f045 0504 	orrne.w	r5, r5, #4
 8003300:	0733      	lsls	r3, r6, #28
 8003302:	bf48      	it	mi
 8003304:	f025 0504 	bicmi.w	r5, r5, #4
 8003308:	4650      	mov	r0, sl
 800330a:	bf48      	it	mi
 800330c:	f045 0508 	orrmi.w	r5, r5, #8
 8003310:	f8cd a000 	str.w	sl, [sp]
 8003314:	f7fc ff58 	bl	80001c8 <strlen>
 8003318:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800331c:	2501      	movs	r5, #1
 800331e:	4628      	mov	r0, r5
 8003320:	4649      	mov	r1, r9
 8003322:	beab      	bkpt	0x00ab
 8003324:	4605      	mov	r5, r0
 8003326:	2d00      	cmp	r5, #0
 8003328:	db05      	blt.n	8003336 <_swiopen+0xa2>
 800332a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800332e:	4447      	add	r7, r8
 8003330:	2300      	movs	r3, #0
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	e7c4      	b.n	80032c0 <_swiopen+0x2c>
 8003336:	4628      	mov	r0, r5
 8003338:	f7ff fe94 	bl	8003064 <error>
 800333c:	4604      	mov	r4, r0
 800333e:	e7bf      	b.n	80032c0 <_swiopen+0x2c>
 8003340:	2000025c 	.word	0x2000025c

08003344 <_get_semihosting_exts>:
 8003344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003348:	4606      	mov	r6, r0
 800334a:	460f      	mov	r7, r1
 800334c:	4829      	ldr	r0, [pc, #164]	@ (80033f4 <_get_semihosting_exts+0xb0>)
 800334e:	2100      	movs	r1, #0
 8003350:	4615      	mov	r5, r2
 8003352:	f7ff ff9f 	bl	8003294 <_swiopen>
 8003356:	462a      	mov	r2, r5
 8003358:	4604      	mov	r4, r0
 800335a:	2100      	movs	r1, #0
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff fce8 	bl	8002d32 <memset>
 8003362:	1c63      	adds	r3, r4, #1
 8003364:	d014      	beq.n	8003390 <_get_semihosting_exts+0x4c>
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff fe62 	bl	8003030 <findslot>
 800336c:	f04f 080c 	mov.w	r8, #12
 8003370:	4681      	mov	r9, r0
 8003372:	4640      	mov	r0, r8
 8003374:	4649      	mov	r1, r9
 8003376:	beab      	bkpt	0x00ab
 8003378:	4680      	mov	r8, r0
 800337a:	4640      	mov	r0, r8
 800337c:	f7ff fe80 	bl	8003080 <checkerror>
 8003380:	2803      	cmp	r0, #3
 8003382:	dd02      	ble.n	800338a <_get_semihosting_exts+0x46>
 8003384:	1ec3      	subs	r3, r0, #3
 8003386:	42ab      	cmp	r3, r5
 8003388:	dc07      	bgt.n	800339a <_get_semihosting_exts+0x56>
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff22 	bl	80031d4 <_close>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b003      	add	sp, #12
 8003396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800339a:	2204      	movs	r2, #4
 800339c:	eb0d 0102 	add.w	r1, sp, r2
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fe82 	bl	80030aa <_read>
 80033a6:	2803      	cmp	r0, #3
 80033a8:	ddef      	ble.n	800338a <_get_semihosting_exts+0x46>
 80033aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033ae:	2b53      	cmp	r3, #83	@ 0x53
 80033b0:	d1eb      	bne.n	800338a <_get_semihosting_exts+0x46>
 80033b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033b6:	2b48      	cmp	r3, #72	@ 0x48
 80033b8:	d1e7      	bne.n	800338a <_get_semihosting_exts+0x46>
 80033ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80033be:	2b46      	cmp	r3, #70	@ 0x46
 80033c0:	d1e3      	bne.n	800338a <_get_semihosting_exts+0x46>
 80033c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033c6:	2b42      	cmp	r3, #66	@ 0x42
 80033c8:	d1df      	bne.n	800338a <_get_semihosting_exts+0x46>
 80033ca:	2201      	movs	r2, #1
 80033cc:	4639      	mov	r1, r7
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff fe85 	bl	80030de <_swilseek>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	dbd8      	blt.n	800338a <_get_semihosting_exts+0x46>
 80033d8:	462a      	mov	r2, r5
 80033da:	4631      	mov	r1, r6
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff fe64 	bl	80030aa <_read>
 80033e2:	4605      	mov	r5, r0
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff fef5 	bl	80031d4 <_close>
 80033ea:	4628      	mov	r0, r5
 80033ec:	f7ff fe48 	bl	8003080 <checkerror>
 80033f0:	e7d0      	b.n	8003394 <_get_semihosting_exts+0x50>
 80033f2:	bf00      	nop
 80033f4:	08003560 	.word	0x08003560

080033f8 <initialise_semihosting_exts>:
 80033f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003424 <initialise_semihosting_exts+0x2c>)
 80033fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003428 <initialise_semihosting_exts+0x30>)
 80033fe:	2100      	movs	r1, #0
 8003400:	2201      	movs	r2, #1
 8003402:	a801      	add	r0, sp, #4
 8003404:	6029      	str	r1, [r5, #0]
 8003406:	6022      	str	r2, [r4, #0]
 8003408:	f7ff ff9c 	bl	8003344 <_get_semihosting_exts>
 800340c:	2800      	cmp	r0, #0
 800340e:	dd07      	ble.n	8003420 <initialise_semihosting_exts+0x28>
 8003410:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003414:	f003 0201 	and.w	r2, r3, #1
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	b003      	add	sp, #12
 8003422:	bd30      	pop	{r4, r5, pc}
 8003424:	2000006c 	.word	0x2000006c
 8003428:	20000068 	.word	0x20000068

0800342c <_has_ext_stdout_stderr>:
 800342c:	b510      	push	{r4, lr}
 800342e:	4c04      	ldr	r4, [pc, #16]	@ (8003440 <_has_ext_stdout_stderr+0x14>)
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	da01      	bge.n	800343a <_has_ext_stdout_stderr+0xe>
 8003436:	f7ff ffdf 	bl	80033f8 <initialise_semihosting_exts>
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	bd10      	pop	{r4, pc}
 800343e:	bf00      	nop
 8003440:	20000068 	.word	0x20000068

08003444 <initialise_monitor_handles>:
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	b085      	sub	sp, #20
 800344a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80034fc <initialise_monitor_handles+0xb8>
 800344e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003452:	2303      	movs	r3, #3
 8003454:	2400      	movs	r4, #0
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	af01      	add	r7, sp, #4
 800345a:	9402      	str	r4, [sp, #8]
 800345c:	2501      	movs	r5, #1
 800345e:	4628      	mov	r0, r5
 8003460:	4639      	mov	r1, r7
 8003462:	beab      	bkpt	0x00ab
 8003464:	4605      	mov	r5, r0
 8003466:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003500 <initialise_monitor_handles+0xbc>
 800346a:	4623      	mov	r3, r4
 800346c:	4c20      	ldr	r4, [pc, #128]	@ (80034f0 <initialise_monitor_handles+0xac>)
 800346e:	f8c8 5000 	str.w	r5, [r8]
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800347a:	3301      	adds	r3, #1
 800347c:	2b14      	cmp	r3, #20
 800347e:	d1fa      	bne.n	8003476 <initialise_monitor_handles+0x32>
 8003480:	f7ff ffd4 	bl	800342c <_has_ext_stdout_stderr>
 8003484:	4d1b      	ldr	r5, [pc, #108]	@ (80034f4 <initialise_monitor_handles+0xb0>)
 8003486:	b1d0      	cbz	r0, 80034be <initialise_monitor_handles+0x7a>
 8003488:	f04f 0a03 	mov.w	sl, #3
 800348c:	2304      	movs	r3, #4
 800348e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003492:	2601      	movs	r6, #1
 8003494:	f8cd a00c 	str.w	sl, [sp, #12]
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	4630      	mov	r0, r6
 800349c:	4639      	mov	r1, r7
 800349e:	beab      	bkpt	0x00ab
 80034a0:	4683      	mov	fp, r0
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <initialise_monitor_handles+0xb4>)
 80034a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80034a8:	f8c3 b000 	str.w	fp, [r3]
 80034ac:	2308      	movs	r3, #8
 80034ae:	f8cd a00c 	str.w	sl, [sp, #12]
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	4630      	mov	r0, r6
 80034b6:	4639      	mov	r1, r7
 80034b8:	beab      	bkpt	0x00ab
 80034ba:	4606      	mov	r6, r0
 80034bc:	602e      	str	r6, [r5, #0]
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	bf02      	ittt	eq
 80034c4:	4b0c      	ldreq	r3, [pc, #48]	@ (80034f8 <initialise_monitor_handles+0xb4>)
 80034c6:	681b      	ldreq	r3, [r3, #0]
 80034c8:	602b      	streq	r3, [r5, #0]
 80034ca:	2600      	movs	r6, #0
 80034cc:	f8d8 3000 	ldr.w	r3, [r8]
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	6066      	str	r6, [r4, #4]
 80034d4:	f7ff ffaa 	bl	800342c <_has_ext_stdout_stderr>
 80034d8:	b130      	cbz	r0, 80034e8 <initialise_monitor_handles+0xa4>
 80034da:	4b07      	ldr	r3, [pc, #28]	@ (80034f8 <initialise_monitor_handles+0xb4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80034e2:	682b      	ldr	r3, [r5, #0]
 80034e4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80034e8:	b005      	add	sp, #20
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	2000025c 	.word	0x2000025c
 80034f4:	20000250 	.word	0x20000250
 80034f8:	20000254 	.word	0x20000254
 80034fc:	08003576 	.word	0x08003576
 8003500:	20000258 	.word	0x20000258

08003504 <_init>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr

08003510 <_fini>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr
